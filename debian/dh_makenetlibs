#!/usr/bin/perl -w

=head1 NAME

dh_makenetlibs - automatically create netlibs file

=cut

use strict;
use Debian::Debhelper::Dh_Lib;

=head1 SYNOPSIS

B<dh_makenetlibs> [S<I<debhelper options>>] [B<-m>I<major>] [B<-V>I<[dependancies]>] [B<-n>] [B<-X>I<item>]

=head1 DESCRIPTION

dh_makenetlibs is a debhelper program that automatically scans for shared
libraries, and generates a netlibs file for the libraries it finds.

It also adds a call to ldconfig in the postinst and postrm scripts (in
V3 mode and above only) to any packages which it finds shared libraries in.

=head1 OPTIONS

=over 4

=item B<-m>I<major>, B<--major=>I<major>

Instead of trying to guess the major number of the library with objdump,
use the major number specified after the -m parameter. This is much less
useful than it used to be, back in the bad old days when this program
looked at library filenames rather than using objdump.

=item B<-V>, B<-V>I<dependancies>

=item B<--version-info>, B<--version-info=>I<dependancies>

By default, the netlibs file generated by this program does not make packages
depend on any particular version of the package containing the shared
library. It may be necessary for you to add some version dependancy
information to the netlibs file. If -V is specified with no dependancy
information, the current version of the package is plugged into a
dependancy that looks like "packagename (>= packageversion)". If -V is
specified with parameters, the parameters can be used to specify the exact
dependancy information needed (be sure to include the package name).

Beware of using -V without any parameters; this is a conservative setting
that always ensures that other packages' shared library dependencies are at
least as tight as they need to be, so that if the maintainer screws up then
they won't break. The flip side is that packages might end up with
dependencies that are too tight and so find it harder to be upgraded.

=item B<-n>, B<--noscripts>

Do not modify postinst/postrm scripts.

=item B<-X>I<item>, B<--exclude=>I<item>

Exclude files that contain "item" anywhere in their filename or directory 
from being treated as shared libraries.

=back

=head1 EXAMPLES

 dh_makenetlibs

Assuming this is a package named libfoobar1, generates a netlibs file that
looks something like:
 libfoobar 1 libfoobar1

 dh_makenetlibs -V

Assuming the current version of the package is 1.0-3, generates a netlibs
file that looks something like:
 libfoobar 1 libfoobar1 (>= 1.0-3)

 dh_makenetlibs -V 'libfoobar1 (>= 1.0)'

Generates a netlibs file that looks something like:
  libfoobar 1 libfoobar1 (>= 1.0)

=cut

init();

sub extraDeps {
   my $config=$_[0].".config";
   return undef;
}

foreach my $package ( @{ $dh{DOPACKAGES} } ) {
    next if is_udeb($package);

    my $tmp = tmpdir($package);

    my %seen;
    my $need_ldconfig = 0;

    doit( "rm", "-f", "$tmp/DEBIAN/netlibs" );

    # So, we look for files or links to existing files with names that
    # match "*.so*". Matching *.so.* is not good enough because of
    # broken crap like db3. And we only look at real files not
    # symlinks, so we don't accidentually add netlibs data to -dev
    # packages. This may have a few false positives, which is ok,
    # because only if we can get a library name and a major number from
    # objdump is anything actually added.
    my $exclude = '';
    if ( defined( $dh{EXCLUDE_FIND} ) && $dh{EXCLUDE_FIND} ne '' ) {
        $exclude = "! \\( $dh{EXCLUDE_FIND} \\) ";
    }
    open( FIND, "find $tmp -type f \\( -name '*.dll' \\) $exclude |" );
    while (<FIND>) {
        chomp;
        my ( $library, $ver, $libfile );
        $libfile = $_;
        my $sig = `monosn -T $_`;
        $sig=~s/.*token is //;
        chomp($sig);
        my $dis = `monodis --assembly $libfile`;
        $dis =~ m/Name:\s+(\S+)/;
        $library = $1;
        $dis =~ m/Version:\s+(\S+)/;
        $ver  = $1;

        if ( defined( $dh{M_PARAMS} ) && $dh{M_PARAMS} ne '' ) {
            $ver = $dh{M_PARAMS};
        }

        if ( !-d "$tmp/DEBIAN" ) {
            doit( "install", "-d", "$tmp/DEBIAN" );
        }
        my $deps = $package;
        if ( -e "debian/$package.netlibs" ) {
            complex_doit("cat debian/$package.netlibs >$tmp/DEBIAN/netlibs");
        }
        else {

            # Call isnative becuase it sets $dh{VERSION}
            # as a side effect.
            isnative($package);
            my $version = $dh{VERSION};

            # Old compatability levels include the
            # debian revision, while new do not.
            if ( !compat(3) ) {

                # Remove debian version, if any.
                $version =~ s/-[^-]+$//;
            }
            $deps = "$package (>= $version)";
            if ( defined($library)
                && defined($ver)
                && defined($deps)
                && $library ne ''
                && $ver ne ''
                && $deps ne '' )
            {

                # Prevent duplicate lines from entering the file.
                my $line = "$library $ver"."__$sig $deps";
                if ( my $extra = extraDeps ($libfile) ) {
                    $line .= ", $extra";
                }
                if ( !$seen{$line} ) {
                    $seen{$line} = 1;
                    complex_doit("echo '$line' >>$tmp/DEBIAN/netlibs");
                }
            }
        }
    }
    close FIND;

    if ( -e "$tmp/DEBIAN/netlibs" ) {
        doit( "chmod", 644,   "$tmp/DEBIAN/netlibs" );
        doit( "chown", "0:0", "$tmp/DEBIAN/netlibs" );
    }
}

=head1 SEE ALSO

L<debhelper(7)>

This program is a part of debhelper.

=head1 AUTHOR

Joey Hess <joeyh@debian.org>

=cut

